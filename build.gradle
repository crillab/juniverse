/*
 * This is the build.gradle configuration file of juniverse.
 */

/************************
 * Plugin Configuration *
 ************************/

apply plugin: "eclipse"
apply plugin: "java"
apply plugin: "jacoco"

/**********************
 * Main Configuration *
 **********************/

def outDir = "${rootDir}/dist"
def jarDir = "${outDir}/home"

ext.moduleName = "fr.univartois.cril.juniverse"

sourceCompatibility = "10"
targetCompatibility = "10"


/*************************
 * Eclipse Configuration *
 *************************/

eclipse.classpath.file.whenMerged {
    // Modularizing project dependencies.
    entries.findAll{ isModule(it) }.each{ it.entryAttributes["module"] = "true" }
}

/****************************************
 * Compilation Configuration for Jigsaw *
 ****************************************/

afterEvaluate {
    compileJava {
        // Setting the module name.
        inputs.property("moduleName", moduleName)

        // Adding the classpath to the module path.
        doFirst {
            options.compilerArgs = [
                "--module-path", classpath.asPath
            ]
            classpath = files()
        }
    }
}

/**********************
 * Test Configuration *
 **********************/

// Making test resources available during test execution.
task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/java/test"
}
processTestResources.dependsOn copyTestResources

// Configuring the use of JUnit 5.
test {
    useJUnitPlatform()
}

// Configuring the version of JaCoCo to use.
jacoco {
    toolVersion = "0.8.7"
}

// Asking for an XML output for JaCoCo.
jacocoTestReport {
    reports {
        xml.required = true
    }
}

/*************
 * Packaging *
 *************/

// Putting the generated jars in the output directory.
tasks.withType(Jar) {
    destinationDirectory = file("${jarDir}")
}

// Removes the binary files of juniverse when cleaning.
task removeBinaries(type: Delete) {
    delete "dist"
}
clean.dependsOn removeBinaries

/*************
 * Functions *
 *************/

// Checking whether an Eclipse classpath entry must be put in the module path.
boolean isModule(entry) {
    (entry.kind == "src") || ((entry.kind == "lib") && (entry.entryAttributes["gradle_used_by_scope"] != "test"))
}
